name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (use with caution)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  deployments: write

jobs:
  validate-production-config:
    runs-on: ubuntu-latest
    environment: production
    env:
      # Production Environment Variables
      DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME_PROD }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD_PROD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET_PROD }}
      REDIS_URL: ${{ secrets.REDIS_URL_PROD }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD_PROD }}
      EMAIL_HOST: ${{ secrets.EMAIL_HOST_PROD }}
      EMAIL_PORT: ${{ secrets.EMAIL_PORT_PROD }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME_PROD }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD_PROD }}
      EMAIL_FROM_ADDRESS: ${{ secrets.EMAIL_FROM_ADDRESS_PROD }}
      EMAIL_FROM_NAME: "TariffSheriff"
      APP_BASE_URL: ${{ secrets.APP_BASE_URL_PROD }}
      FRONTEND_URL: ${{ secrets.FRONTEND_URL_PROD }}
      CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS_PROD }}
      SPRING_PROFILES_ACTIVE: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate production configuration
        run: |
          chmod +x scripts/validate-config.sh
          ./scripts/validate-config.sh

      - name: Test database connectivity
        run: |
          # Install PostgreSQL client
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          chmod +x scripts/test-db-connection.sh
          ./scripts/test-db-connection.sh

      - name: Test Redis connectivity
        run: |
          # Install Redis client
          sudo apt-get install -y redis-tools
          chmod +x scripts/test-redis-connection.sh
          ./scripts/test-redis-connection.sh

      - name: Test email configuration
        run: |
          chmod +x scripts/test-email-config.sh
          ./scripts/test-email-config.sh

  build-and-test-production:
    runs-on: ubuntu-latest
    needs: validate-production-config
    if: ${{ !inputs.skip_tests }}
    environment: production
    env:
      # Use production-like configuration for testing
      DATABASE_URL: ${{ secrets.DATABASE_URL_DEV }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME_DEV }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD_DEV }}
      JWT_SECRET: ${{ secrets.JWT_SECRET_PROD }}
      REDIS_URL: ${{ secrets.REDIS_URL_DEV }}
      EMAIL_HOST: ${{ secrets.EMAIL_HOST_DEV }}
      EMAIL_PORT: ${{ secrets.EMAIL_PORT_DEV }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME_DEV }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD_DEV }}
      EMAIL_FROM_ADDRESS: ${{ secrets.EMAIL_FROM_ADDRESS_DEV }}
      SPRING_PROFILES_ACTIVE: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - name: Start Redis for testing
        uses: supercharge/redis-github-action@1.7.0
        with:
          redis-version: 7

      - name: Build application
        working-directory: apps/backend
        run: mvn -B -Dspring.profiles.active=prod clean compile

      - name: Run tests with production profile
        working-directory: apps/backend
        run: mvn -B -Dspring.profiles.active=prod test

      - name: Run integration tests
        working-directory: apps/backend
        run: mvn -B -Dspring.profiles.active=prod failsafe:integration-test failsafe:verify

      - name: Build production JAR
        working-directory: apps/backend
        run: mvn -B -Dspring.profiles.active=prod package -DskipTests

      - name: Upload production artifact
        uses: actions/upload-artifact@v4
        with:
          name: production-jar
          path: apps/backend/target/*.jar
          retention-days: 30

  security-audit:
    runs-on: ubuntu-latest
    needs: validate-production-config
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - name: Run security audit
        working-directory: apps/backend
        run: |
          # OWASP Dependency Check
          mvn org.owasp:dependency-check-maven:check
          
          # Maven security audit
          mvn com.github.spotbugs:spotbugs-maven-plugin:check

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            apps/backend/target/dependency-check-report.html
            apps/backend/target/spotbugsXml.xml

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [validate-production-config, build-and-test-production, security-audit]
    if: always() && (needs.build-and-test-production.result == 'success' || inputs.skip_tests) && needs.validate-production-config.result == 'success' && needs.security-audit.result == 'success'
    environment: 
      name: production
      url: ${{ secrets.APP_BASE_URL_PROD }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download production artifact
        if: ${{ !inputs.skip_tests }}
        uses: actions/download-artifact@v4
        with:
          name: production-jar
          path: apps/backend/target/

      - name: Setup Java (if skipping tests)
        if: ${{ inputs.skip_tests }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - name: Build production JAR (if skipping tests)
        if: ${{ inputs.skip_tests }}
        working-directory: apps/backend
        env:
          SPRING_PROFILES_ACTIVE: prod
        run: mvn -B -Dspring.profiles.active=prod clean package -DskipTests

      - name: Deploy to production
        env:
          # Production deployment configuration
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST_PROD }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER_PROD }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY_PROD }}
          APP_BASE_URL: ${{ secrets.APP_BASE_URL_PROD }}
        run: |
          echo "üöÄ Deploying to production..."
          echo "This step would deploy the JAR to your production environment"
          echo "Configure this section based on your deployment target:"
          echo "- Docker container deployment"
          echo "- Cloud platform deployment (AWS, GCP, Azure)"
          echo "- Traditional server deployment"
          echo "- Kubernetes deployment"

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME_PROD }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD_PROD }}
        run: |
          echo "üóÑÔ∏è Running database migrations..."
          # Install PostgreSQL client
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
          # Run Flyway migrations (if using Flyway CLI)
          # Or trigger migrations through the application startup
          echo "Migrations would be executed here"

      - name: Health check
        env:
          APP_BASE_URL: ${{ secrets.APP_BASE_URL_PROD }}
        run: |
          echo "üè• Performing health check..."
          # Wait for application to start
          sleep 30
          
          # Check health endpoint
          # curl -f $APP_BASE_URL/actuator/health || exit 1
          echo "Health check would be performed here"

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "Application URL: ${{ secrets.APP_BASE_URL_PROD }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Check the logs above for details"

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    if: needs.deploy-backend.result == 'success'
    environment:
      name: production-frontend
      url: ${{ secrets.FRONTEND_URL_PROD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20.19.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend for production
        env:
          VITE_API_BASE_URL: ${{ secrets.APP_BASE_URL_PROD }}
          VITE_APP_NAME: "TariffSheriff"
          VITE_APP_VERSION: ${{ github.sha }}
        run: npm run build --workspace=frontend

      - name: Deploy frontend
        env:
          FRONTEND_DEPLOY_TOKEN: ${{ secrets.FRONTEND_DEPLOY_TOKEN }}
        run: |
          echo "üåê Deploying frontend to production..."
          echo "This step would deploy the built frontend to your hosting platform:"
          echo "- Vercel"
          echo "- Netlify"
          echo "- AWS S3 + CloudFront"
          echo "- GitHub Pages"
          echo "- Custom hosting"

      - name: Frontend health check
        env:
          FRONTEND_URL: ${{ secrets.FRONTEND_URL_PROD }}
        run: |
          echo "üè• Checking frontend deployment..."
          # curl -f $FRONTEND_URL || exit 1
          echo "Frontend health check would be performed here"

  post-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && needs.deploy-backend.result == 'success'
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run post-deployment tests
        env:
          APP_BASE_URL: ${{ secrets.APP_BASE_URL_PROD }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL_PROD }}
        run: |
          echo "üß™ Running post-deployment tests..."
          # Run smoke tests, API tests, etc.
          echo "Post-deployment tests would run here"

      - name: Update monitoring
        run: |
          echo "üìä Updating monitoring and alerting..."
          echo "Configure monitoring for the new deployment"

      - name: Create deployment record
        run: |
          echo "üìù Creating deployment record..."
          echo "Deployment completed at: $(date)"
          echo "Git SHA: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"